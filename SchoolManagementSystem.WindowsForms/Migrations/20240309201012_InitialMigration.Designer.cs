// <auto-generated />
using System;
using EFProject;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFProject.Migrations
{
    [DbContext(typeof(MyAppDBContext))]
    [Migration("20240309201012_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EFProject.Entities.Course", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("InstructorID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("ID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("InstructorID");

                    b.ToTable("Courses", (string)null);
                });

            modelBuilder.Entity("EFProject.Entities.CourseSession", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CSessionCourseID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("InstructorID")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasDefaultValue("No Title");

                    b.HasKey("ID");

                    b.HasIndex("CSessionCourseID");

                    b.HasIndex("InstructorID");

                    b.ToTable("CoursesSessions", (string)null);
                });

            modelBuilder.Entity("EFProject.Entities.CourseSessionAttendance", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("CourseSessionID")
                        .HasColumnType("int");

                    b.Property<int>("Grade")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(max)")
                        .HasDefaultValue("No Notes");

                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("CourseSessionID");

                    b.HasIndex("StudentID");

                    b.ToTable("CoursesSessionsAttendance", (string)null);
                });

            modelBuilder.Entity("EFProject.Entities.Course_Student", b =>
                {
                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<int>("CStudentCourseID")
                        .HasColumnType("int");

                    b.HasKey("StudentID", "CStudentCourseID");

                    b.HasIndex("CStudentCourseID");

                    b.ToTable("Courses_Students");
                });

            modelBuilder.Entity("EFProject.Entities.Department", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Location")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("ManagerID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("ID");

                    b.HasIndex("ManagerID")
                        .IsUnique()
                        .HasFilter("[ManagerID] IS NOT NULL");

                    b.ToTable("Departments", (string)null);
                });

            modelBuilder.Entity("EFProject.Entities.Instructor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("ID");

                    b.HasIndex("DepartmentID");

                    b.ToTable("Instructors", (string)null);
                });

            modelBuilder.Entity("EFProject.Entities.Student", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.HasKey("ID");

                    b.ToTable("Students", (string)null);
                });

            modelBuilder.Entity("EFProject.Entities.Course", b =>
                {
                    b.HasOne("EFProject.Entities.Department", "Department")
                        .WithMany("Courses")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EFProject.Entities.Instructor", "Instructor")
                        .WithMany("Courses")
                        .HasForeignKey("InstructorID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("EFProject.Entities.CourseSession", b =>
                {
                    b.HasOne("EFProject.Entities.Course", "Course")
                        .WithMany("CoursesSessions")
                        .HasForeignKey("CSessionCourseID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EFProject.Entities.Instructor", "Instructor")
                        .WithMany("CourseSessions")
                        .HasForeignKey("InstructorID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("EFProject.Entities.CourseSessionAttendance", b =>
                {
                    b.HasOne("EFProject.Entities.CourseSession", "CourseSession")
                        .WithMany()
                        .HasForeignKey("CourseSessionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EFProject.Entities.Student", "Student")
                        .WithMany("CourseSessionAttendance")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CourseSession");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EFProject.Entities.Course_Student", b =>
                {
                    b.HasOne("EFProject.Entities.Course", "Course")
                        .WithMany("Courses_Students")
                        .HasForeignKey("CStudentCourseID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EFProject.Entities.Student", "Student")
                        .WithMany("Courses_Students")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EFProject.Entities.Department", b =>
                {
                    b.HasOne("EFProject.Entities.Instructor", "Manager")
                        .WithOne("DepartmentToBeManage")
                        .HasForeignKey("EFProject.Entities.Department", "ManagerID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("EFProject.Entities.Instructor", b =>
                {
                    b.HasOne("EFProject.Entities.Department", "Department")
                        .WithMany("Instructors")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("EFProject.Entities.Course", b =>
                {
                    b.Navigation("CoursesSessions");

                    b.Navigation("Courses_Students");
                });

            modelBuilder.Entity("EFProject.Entities.Department", b =>
                {
                    b.Navigation("Courses");

                    b.Navigation("Instructors");
                });

            modelBuilder.Entity("EFProject.Entities.Instructor", b =>
                {
                    b.Navigation("CourseSessions");

                    b.Navigation("Courses");

                    b.Navigation("DepartmentToBeManage")
                        .IsRequired();
                });

            modelBuilder.Entity("EFProject.Entities.Student", b =>
                {
                    b.Navigation("CourseSessionAttendance");

                    b.Navigation("Courses_Students");
                });
#pragma warning restore 612, 618
        }
    }
}
